# Project Euler problem: 002 - Fibonacci Sequence

"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 
1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
"""

# Function 1: A function that pushes the first 3 terms of fibonacci sequence

""""
def fib_seq(x,y):
    This function will take 2 inputs, then will spit out the first 3 terms of of the seq.
    num1 = x
    num2 = y
    num3 = num1 + num2
    return (num1, num2, num3)

res = list(fib_seq(1,2)) # if we want to output it as a list, we use the list function
print(res)

"""

# Function 2: A function that outputs a fibonacci sequence up to n

def fib_seq2(x, y, n):
    """ This function will use while loop so we can specify how many terms we can do """
    num1 = x # 1st term
    num2 = y # 2nd term
    i = 0 # Initialising while loop.
    lst = [num1, num2] # 1st & 2nd term added into the list
    while i < n:
        num3 = num1 + num2 # Third term is the sum of first two terms
        lst.append(num3) # The sum of the value is then added onto the list via append()
        num1 = num2 # Then we shift to the next terms e.g. 1st term is now 2nd term 
        num2 = num3 # 2nd term is now 3rd term 
        i = i + 1 # This 'shifting' will continue until we reach 'n' 
    return lst

res2 = fib_seq2(0,1,5)
print(res2)



